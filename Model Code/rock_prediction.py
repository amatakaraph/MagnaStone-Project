# -*- coding: utf-8 -*-
"""Rock Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ork_oFegJUF4AGrOOwNDoiD87Ecwi5jO

#Import Library
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import cv2
import random
import os

from tensorflow.keras.layers import Input , Dense , Flatten , GlobalAveragePooling2D
from tensorflow.keras.models import Sequential

from google.colab import drive
drive.mount('/content/drive')

"""#Load, Reading, and Visualizing Dataset"""

path = '/content/drive/MyDrive/Project Akhir Orbit Future Academy/Project Akhir/train/Testing'

names = []
nums = []
data = {'Name of class':[],'Number of samples':[]}

for i in os.listdir(path+'/train'):
    nums.append(len(os.listdir(path+'/train/'+i)))
    names.append(i)

data['Name of class']+=names
data['Number of samples']+=nums

df = pd.DataFrame(data)
df

sns.barplot(x=df['Name of class'],y=df['Number of samples'])

print(classes)

classes = os.listdir(path+'/train')

plt.figure(figsize=(30 , 30))
for x in range(10):
    i = random.randint(0,2)                    # getting the class
    images = os.listdir(path+'/train'+'/'+classes[i])
    j = random.randint(0,414)                  # getting the image
    image = cv2.imread(path+'/train'+'/'+classes[i]+'/'+images[j])
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    ax = plt.subplot(5, 5, x + 1)
    plt.imshow(image)
    plt.title(classes[i])
    plt.axis("off")

plt.show()

"""#Pre-Processing Dataset"""

#class_weight = {0: 1/535, 1: 1/383, 2: 1/161, 3: 1/390, 4: 1/414, 5: 1/446, 6: 1/136}

image_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1./255 , rotation_range=20,
                                                                width_shift_range=0.2,
                                                                height_shift_range=0.2,
                                                                horizontal_flip=True, validation_split=0.2)

train_ds = image_datagen.flow_from_directory(
        path+'/train',
        subset='training',
        target_size=(224 , 224),
        batch_size=32)

val_ds = image_datagen.flow_from_directory(
        path+'/train',
        subset='validation',
        target_size=(224 , 224),
        batch_size=32 )

VGG = tf.keras.applications.VGG16(input_shape=(224 , 224, 3),
                                           include_top=False,
                                           weights='imagenet')

model = Sequential()
model.add(VGG)
#model.add(GlobalAveragePooling2D())
model.add(Flatten())
model.add(Dense(512, activation="relu"))
#model.add(Dense(1024, activation="relu"))
model.add(Dense(3, activation="softmax" , name="classification"))

model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.0001,rho=0.9,momentum=0.0 ,epsilon=1e-07,centered=False),
            loss='categorical_crossentropy',
            metrics = ['accuracy'])

model.summary()

"""#Train and Test"""

history = model.fit(train_ds , validation_data = val_ds , epochs = 50) #class_weight = class_weight)

model.evaluate(val_ds)

plt.figure()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['loss','val_loss'],loc='upper right')
plt.show()
plt.figure()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['accuracy','val_accuracy'],loc='upper right')
plt.show()

"""#Model Predict"""

from tensorflow.keras.preprocessing.image import load_img

image = load_img('/content/drive/MyDrive/Project Akhir Orbit Future Academy/Project Akhir/train/Testing/train/Marble/1 (40).jpg', target_size=(224, 224))
img = np.array(image)
img = img / 255.0
img = img.reshape(1,224,224,3)

prediction = model.predict(img)

print(prediction[0])

class_prediction = np.argmax(prediction, axis=1)
class_prediction_max = np.max(prediction, axis=1)

print(class_prediction_max)

# Prediksi untuk Data Latih
y_pred_train            = model.predict_proba(x_train2)
y_pred_train_classes    = np.argmax(y_pred_train, axis=1)
y_pred_train_max_probas = np.max(y_pred_train, axis=1)

